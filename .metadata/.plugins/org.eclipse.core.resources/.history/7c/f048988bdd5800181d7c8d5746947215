package cn.e3mall.service.impl;

import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.Session;
import javax.jms.TextMessage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.jms.core.MessageCreator;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

import cn.e3mall.common.pojo.EasyUIDataGridResult;
import cn.e3mall.common.utils.E3Result;
import cn.e3mall.common.utils.IDUtils;
import cn.e3mall.mapper.TbItemDescMapper;
import cn.e3mall.mapper.TbItemMapper;
import cn.e3mall.pojo.TbContentCategoryExample.Criteria;
import cn.e3mall.pojo.TbItem;
import cn.e3mall.pojo.TbItemDesc;
import cn.e3mall.pojo.TbItemExample;
import cn.e3mall.service.ItemService;
/**
 * 商品管理service
 * @author 郑小飞
 *
 */
@Service
public class ItemServiceImpl implements ItemService {
	@Autowired
	private TbItemMapper itemMapper; 
	@Autowired
	private TbItemDescMapper itemDescMapper;
	@Autowired
	private JmsTemplate jmsTemplate;
	@Resource
	private Destination topicDestination;
	
	
	@Override
	public TbItem getItemById(long itemId) {
		//根据主键查询
		//TbItem tbItem = itemMapper.selectByPrimaryKey(itemId);
		//可设置查询条件
		TbItemExample example=new TbItemExample();
		cn.e3mall.pojo.TbItemExample.Criteria criteria=example.createCriteria();
		criteria.andIdEqualTo(itemId);
		List<TbItem> list=itemMapper.selectByExample(example);
		if(list!=null&&list.size()>0){
			return list.get(0);
		}
		return null;
	}
	@Override
	public EasyUIDataGridResult getItemList(int page, int rows) {
		//设置分页信息
		PageHelper.startPage(page, rows);
		//执行查询
		TbItemExample example=new TbItemExample();
		List<TbItem> list=itemMapper.selectByExample(example);
		//创建返回值
		EasyUIDataGridResult result=new EasyUIDataGridResult();
		result.setRows(list);
		//取结果
		PageInfo<TbItem> pageInfo=new PageInfo<>(list);
		long total=pageInfo.getTotal();
		result.setTotal(total);
		return result;
	}
	
	//添加商品
	@Override
	public E3Result addItem(TbItem item,String desc){
		final long itemId = IDUtils.genItemId();
		item.setId(itemId);
		item.setStatus((byte)1);
		item.setCreated(new Date());
		item.setUpdated(new Date());
		itemMapper.insert(item);
		TbItemDesc itemDesc = new TbItemDesc();
		itemDesc.setItemId(itemId);
		itemDesc.setItemDesc(desc);
		itemDesc.setCreated(new Date());
		itemDesc.setUpdated(new Date());
		itemDescMapper.insert(itemDesc);
		//发送商品添加消息
//		jmsTemplate.send(topicDestination,new MessageCreator() {
//			
//			@Override
//			public Message createMessage(Session session) throws JMSException {
//				TextMessage textMessage = session.createTextMessage(itemId+"");
//				System.out.println("商品发出索引id："+itemId+":::"+textMessage);
//				return textMessage;
//			}
//		});
		return E3Result.ok();
	}
	
	//上架商品  商品状态，1-正常，2-下架，3-删除
	@Override
	public E3Result shelfItem(String ids){
		String[] idsArr=ids.split(",");
		for(int i=0;i<idsArr.length;i++){
			long idLong=Long.parseLong(idsArr[i]);
			TbItem item=itemMapper.selectByPrimaryKey(idLong);
			item.setStatus((byte)1);
			System.out.println(item.getId());
			itemMapper.updateByPrimaryKeySelective(item);
		}
		return E3Result.ok();
	}
	//下架商品  商品状态，1-正常，2-下架，3-删除
		@Override
		public E3Result instock(String ids){
			String[] idsArr=ids.split(",");
			for(int i=0;i<idsArr.length;i++){
				long idLong=Long.parseLong(idsArr[i]);
				TbItem item=itemMapper.selectByPrimaryKey(idLong);
				item.setStatus((byte)2);
				System.out.println(item.getId());
				itemMapper.updateByPrimaryKeySelective(item);
			}
			return E3Result.ok();
		}
		//删除商品 
		@Override
		public E3Result deleteTbItemAndDesc(String ids){
			String[] idsArr=ids.split(",");
			for(int i=0;i<idsArr.length;i++){
				long idLong=Long.parseLong(idsArr[i]);
				itemMapper.deleteByPrimaryKey(idLong);
				itemDescMapper.deleteByPrimaryKey(idLong);
			}
			return E3Result.ok();
		}
		//根据ID查询商品的描述
		@Override
		public TbItemDesc getItemDescById(Long id){
			TbItemDesc itemDesc=itemDescMapper.selectByPrimaryKey(id);
			return itemDesc;
		}
		@Override
		public E3Result updateTbItemAndDesc(TbItem item,String desc){
			item.setUpdated(new Date());
			itemMapper.updateByPrimaryKeySelective(item);

			TbItemDesc itemDesc = new TbItemDesc();
			itemDesc.setItemId(item.getId());
			itemDesc.setItemDesc(desc);
			itemDesc.setUpdated(new Date());
			itemDescMapper.updateByPrimaryKeySelective(itemDesc);
			return E3Result.ok();
		}
		@Override
		public TbItemDesc getItemDescById(long itemId) {
			TbItemDesc select = itemDescMapper.selectByPrimaryKey(itemId);
			return select;
		}

}
